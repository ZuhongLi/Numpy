一、Numpy计数、排序
'quicksort'(快速排序)（速度最慢）
'mergesort'(归并排序)
'heapsort'(堆排序)（速度最快）


二、Numpy搜索
1.
sort()函数返回输入数组的排序副本
a = np.array([[3,7],[9,1]])
print np.sort(a) print np.sort(a, axis = 0)
dt = np.dtype([('name', 'S10'),('age', int)])
a = np.array([("raju",21),("anil",25),("ravi", 17), ("amar",27)], dtype = dt)print np.sort(a, order = 'name')
输出：
调用 sort() 函数：[[3 7][1 9]]
沿轴 0 排序：
[[3 1]
[9 7]]
我们的数组是：
[('raju', 21) ('anil', 25) ('ravi', 17) ('amar', 27)]

按 name 排序：
[('amar', 27) ('anil', 25) ('raju', 21) ('ravi', 17)]
2.
numpy.argsort()函数对输入数组沿给定轴执行间接排序，并使用指定排序类型返回数据的索引数组。 这个索引数组用于构造排序后的数组
x = np.array([3, 1, 2])
y = np.argsort(x)
print y print x[y]
输出：
我们的数组是：
[3 1 2]
对 x 调用 argsort() 函数：
[1 2 0]
以排序后的顺序重构原数组：
[1 2 3]
3、
where()函数返回输入数组中满足给定条件的元素的索引。
x = np.arange(9.).reshape(3, 3)
y = np.where(x > 3)
print y
print x[y]
输出：
大于 3 的元素的索引：
(array([1, 1, 2, 2, 2]), array([1, 2, 0, 1, 2]))

使用这些索引来获取满足条件的元素：
[ 4. 5. 6. 7. 8.]
