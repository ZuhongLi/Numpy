# 从列表中获得迭代器
import numpy as np
list = range(5)
            it = iter(list)
            # 使用迭代器创建 ndarray
            x = np.fromiter(it, dtype = float)
            print （x）
                    输出：
                            [0. 1. 2. 3. 4.]

*numpy.linspace(start, stop, num, endpoint, retstep, dtype)：
        num 要生成的等间隔样例数量，默认为50
        endpoint 序列中是否包含stop值，默认为ture
        retstep 如果为true，返回样例，以及连续数字之间的步长
            例：
import numpy as np
x = np.linspace(10,20,5)
print x
            输出：[10. 12.5 15. 17.5 20.]
            

* numpy.logspace返回一个ndarray对象，其中包含在对数刻度上均匀分布的数字。 刻度的开始和结束端点是某个底数的幂，通常为 10。
         numpy.logscale(start, stop, num, endpoint, base, dtype)
         start 起始值是base ** start（即base的start次方）
                stop 终止值是base ** stop（即base的stop次方）
例：

# 将对数空间的底数设置为 2
import numpy as np
a = np.logspace(1,10,num = 10, base = 2)
print a
输出：[ 2. 4. 8. 16. 32. 64. 128. 256. 512. 1024.]


* 通过将由冒号分隔的切片参数(start:stop:step)直接提供给ndarray对象。
例：
import numpy as np
a = np.array([[1,2,3],[3,4,5],[4,5,6]])
print a
# 对始于索引的元素进行切片
print '现在我们从索引 a[1:] 开始对数组切片'
print a[1:]
输出：
[[1 2 3]
[3 4 5]
[4 5 6]]



* numpy.squeeze函数： 函数从给定数组的形状中删除一维条目。 此函数需要两个参数。numpy.squeeze(arr, axis)
例：
import numpy as np
x = np.arange(9).reshape(1,3,3)

print '数组 x：'print x
print '\n'
y = np.squeeze(x)

print '数组 y：'print y
print '\n'

print '数组 x 和 y 的形状：'print x.shape, y.shape

输出：
数组 x：
[[[0 1 2]
[3 4 5]
[6 7 8]]]

数组 y：
[[0 1 2]
[3 4 5]
[6 7 8]]

数组 x 和 y 的形状：
(1, 3, 3) (3, 3)

*numpy.concatenate（concatenate是连接，stack是堆叠）
import numpy as np
a = np.array([[1,2],[3,4]])
print '第一个数组：'print a
print '\n'
b = np.array([[5,6],[7,8]])
print '第二个数组：'print b
print '\n'
# 两个数组的维度相同
print '沿轴 0 连接两个数组：'print np.concatenate((a,b))print '\n'
print '沿轴 1 连接两个数组：'print np.concatenate((a,b),axis = 1)


*numpy.append此函数在输入数组的末尾添加值。 附加操作不是原地的，而是分配新的数组。 此外，输入数组的维度必须匹配否则将生成ValueError。
import numpy as np
a = np.array([[1,2,3],[4,5,6]])
print '第一个数组：'print a
print '\n'
print '向数组添加元素：'print np.append(a, [7,8,9])print '\n'
print '沿轴 0 添加元素：'print np.append(a, [[7,8,9]],axis = 0)print '\n'
print '沿轴 1 添加元素：'print np.append(a, [[5,5,5],[7,8,9]],axis = 1)

*numpy.insert此函数在给定索引之前，沿给定轴在输入数组中插入值。 如果值的类型转换为要插入，则它与输入数组不同。 插入没有原地的，函数会返回一个新数组。 
此外，如果未提供轴，则输入数组会被展开。
import numpy as np
a = np.array([[1,2],[3,4],[5,6]])
print '第一个数组：'print a
print '\n'
print '未传递 Axis 参数。 在插入之前输入数组会被展开。'
print np.insert(a,3,[11,12])
print '\n'
print '传递了 Axis 参数。 会广播值数组来配输入数组。'

*numpy.delete此函数返回从输入数组中删除指定子数组的新数组。 与insert()函数的情况一样，如果未提供轴参数，则输入数组将展开。 该函数接受以下参数：
import numpy as np
a = np.arange(12).reshape(3,4)

print '第一个数组：'print a
print '\n'

print '未传递 Axis 参数。 在插入之前输入数组会被展开。'print np.delete(a,5)print '\n'
print '删除第二列：'
print np.delete(a,1,axis = 1)print '\n'
print '包含从数组中删除的替代值的切片：'
a = np.array([1,2,3,4,5,6,7,8,9,10])
print np.delete(a, np.s_[::2])


*numpy.unique此函数返回输入数组中的去重元素数组。 该函数能够返回一个元组，包含去重数组和相关索引的数组。 索引的性质取决于函数调用中返回参数的类型。
import numpy as np
a = np.array([5,2,6,2,7,5,6,8,2,9])
print '第一个数组：'print a
print '\n'
print '第一个数组的去重值：'
u = np.unique(a)print u
print '\n'
