一、Numpy 位操作
序号 操作及描述 函数方法 
1. 
bitwise_and 对数组元素执行位与操作 print np.bitwise_and(13, 17)（对两个整数进行与操作） 
2. 
bitwise_or 对数组元素执行位或操作 print np.bitwise_or(13, 17)（对两个整数进行或操作） 
3. 
invert 计算位非 print np.invert(np.array([13], dtype = np.uint8)) 
4. 
left_shift 向左移动二进制表示的位 print np.left_shift(10,2) 函数将数组元素的二进制表示中的位向左移动到指定位置，右侧附加相等数量的 0 
5. 
right_shift 向右移动二进制表示的位 print np.right_shift(40,2) 函数将数组元素的二进制表示中的位向右移动到指定位置，左侧附加相等数量的 0。 
6.
np.binary_repr() 函数返回给定宽度中十进制数的二进制表示 np.binary_repr(10, width = 8)将10的二进制指定为8位 

二、Numpy字符操作
1.
add() 返回两个str或Unicode数组的逐个字符串连接
np.char.add(['hello'],[' xyz']) 输出：['hello xyz']
np.char.add(['hello', 'hi'],[' abc', ' xyz'])输出：['hello abc' 'hi xyz']
2.
multiply() 返回按元素多重连接后的字符串
np.char.multiply('Hello ',3)输出：Hello Hello Hello
3.
center() 返回给定字符串的副本，其中元素位于特定字符串的中央
print np.char.center('hello', 20,fillchar = '*')fillchar用于在左右两侧进行填充
输出：*******hello********
4.
capitalize() 返回给定字符串的副本，其中只有第一个字符串大写
print np.char.capitalize('hello world')
输出：Hello world
5.
title() 返回字符串或 Unicode 的按元素标题转换版本
print np.char.title('hello how are you?')输出：Hello How Are You?
6.
lower() 返回一个数组，其元素转换为小写
print np.char.lower(['HELLO','WORLD']) 输出：['hello' 'world']
7.
upper() 返回一个数组，其元素转换为大写
print np.char.upper('hello') 输出：HELLO
8.
split() 返回字符串中的单词列表，并使用分隔符来分割
若无sep参数，则默认sep为空格
print np.char.split ('YiibaiPoint,Hyderabad,Telangana', sep = ',')
输出：['YiibaiPoint', 'Hyderabad', 'Telangana']
9.
splitlines() 返回元素中的行列表，以换行符分割
print np.char.splitlines('hello\nhow are you?') 输出：['hello', 'how are you?']
10.
strip() 返回数组副本，其中元素移除了开头或者结尾处的特定字符
print np.char.strip('ashok arora','a')
输出：shok aror
11.
join() 返回一个字符串，它是序列中字符串的连接
print np.char.join(':','dmy') 输出：d:m:y
print np.char.join([':','-'],['dmy','ymd'])输出：['d:m:y' 'y-m-d']
12.
replace() 返回字符串的副本，其中所有子字符串的出现位置都被新字符串取代
print np.char.replace ('He is a good boy', 'is', 'was')
输出：He was a good boy
13.
decode() 按元素调用str.decode
a = np.char.encode('hello', 'cp500') （cp500为特定编码）
输出：\x88\x85\x93\x93\x96
14.
encode() 按元素调用str.encode
a = np.char.encode('hello', 'cp500') 输出：\x88\x85\x93\x93\x96


三、Numpy数学函数
1.
numpy.around() 返回四舍五入到所需精度的值。 该函数接受以下参数。 decimals 要舍入的小数位数。 默认值为0。 如果为负，整数将四舍五入到小数点左侧的位置
a = np.array([1.0,5.55, 123, 0.567, 25.532])
print np.around(a, decimals = 1)
输出：[ 1. 5.6 123. 0.6 25.5]
2.
numpy.floor()此函数返回不大于输入参数的最大整数。 即标量x 的下限是最大的整数i ，使得i <= x。 注意在Python中，向下取整总是从 0 舍入。
a = np.array([-1.7, 1.5, -0.2, 0.6, 10])
print np.floor(a)
输出：[ -2. 1. -1. 0. 10.]
3.
ceil()函数返回输入值的上限，即，标量x的上限是最小的整数i ，使得i> = x
a = np.array([-1.7, 1.5, -0.2, 0.6, 10])
print np.ceil(a)
[ -1. 2. -0. 1. 10.]

四、Numpy算数运算
1.
numpy.reciprocal()此函数返回参数逐元素的倒数。 由于 Python 处理整数除法的方式，对于绝对值大于 1 的整数元素，结果始终为 0， 对于整数 0，则发出溢出警告。
a = np.array([10,100,1000])
print np.power(a,2)
输出：[ 4. 0.7518797 1. inf 0.01 ]
2.
numpy.power()此函数将第一个输入数组中的元素作为底数，计算它与第二个输入数组中相应元素的幂。
a = np.array([-1.7, 1.5, -0.2, 0.6, 10])
print np.floor(a)
输出：[ 100 10000 1000000]
3.
numpy.mod()此函数返回输入数组中相应元素的除法余数。 函数numpy.remainder()也产生相同的结果。
a = np.array([10,20,30])
b = np.array([3,5,7])print np.mod(a,b)
输出：调用 mod() 函数：[1 0 2]


五、Numpy统计函数
1.
numpy.amin()
从给定数组中的元素沿指定轴返回最小值
a = np.array([[3,7,5],[8,4,3],[2,4,9]])
print np.amin(a,1) print np.amin(a,0)
输出：[3 3 2]、[2 4 3]
2.
numpy.amax() 
从给定数组中的元素沿指定轴返回最大值。
a = np.array([[3,7,5],[8,4,3],[2,4,9]])
print np.amax(a) print np.amax(a, axis = 0)
输出：9 [8 7 9]
3.
numpy.ptp()
函数返回沿轴的值的范围(最大值 - 最小值)。
a = np.array([[3,7,5],[8,4,3],[2,4,9]])
print np.ptp(a) print np.ptp(a, axis = 1) print np.ptp(a, axis = 0)
输出：调用 ptp() 函数：7
沿轴 1 调用 ptp() 函数：[4 5 7]
沿轴 0 调用 ptp() 函数：[6 3 6]
4、
 numpy.percentile()百分位数是统计中使用的度量，表示小于这个值得观察值占某个百分比。
a = np.array([[30,40,70],[80,20,10],[50,90,60]])
print np.percentile(a,50) print np.percentile(a,50, axis = 1) print np.percentile(a,50, axis = 0)
输出：调用 percentile() 函数：50.0
沿轴 1 调用 percentile() 函数：[ 40. 20. 60.]
沿轴 0 调用 percentile() 函数：[ 50. 40. 60.]
5、
numpy.median()中值定义为将数据样本的上半部分与下半部分分开的值。
a = np.array([[30,65,70],[80,95,10],[50,90,60]])
print np.median(a) print np.median(a, axis = 0) print np.median(a, axis = 1)
输出：调用 median() 函数：65.0。沿轴 0 调用 median() 函数：[ 50. 90. 60.]沿轴 1 调用 median() 函数：[ 65. 80. 60.]
6、
numpy.mean()函数返回数组中元素的算术平均值。 如果提供了轴，则沿其计算。
a = np.array([[1,2,3],[3,4,5],[4,5,6]])
print np.mean(a) print np.mean(a, axis = 0) print np.mean(a, axis = 1)
输出：调用 mean() 函数：3.66666666667，
沿轴 0 调用 mean() 函数：[ 2.66666667 3.66666667 4.66666667]，
沿轴 1 调用 mean() 函数：[ 2. 4. 5.]
7、
加权平均值是由每个分量乘以反映其重要性的因子得到的平均值。 numpy.average()函数根据在另一个数组中给出的各自的权重计算数组中元素的加权平均值。 该函数可以接受一个轴参数。 如果没有指定轴，则数组会被展开。
考虑数组[1,2,3,4]和相应的权重[4,3,2,1]，通过将相应元素的乘积相加，并将和除以权重的和，来计算加权平均值。
加权平均值 = (1*4+2*3+3*2+4*1)/(4+3+2+1)
a = np.array([1,2,3,4])
print np.average(a)
# 不指定权重时相当于 mean 函数
wts = np.array([4,3,2,1])
print np.average(a,weights = wts)
print '权重的和：'
print np.average([1,2,3,4],weights = [4,3,2,1], returned = True)
我们的数组是：
[1 2 3 4]
调用 average() 函数：
2.5
再次调用 average() 函数：
2.0
平均值以及权重的和：
(2.0, 10.0)
